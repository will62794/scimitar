{
    "preds"  :  [
        "(currentTerm[VARI] > currentTerm[VARJ])",
        "(currentTerm[VARJ] > currentTerm[VARI])",
        "(currentTerm[VARI] >= currentTerm[VARJ])",
        "(currentTerm[VARJ] >= currentTerm[VARI])",
        "(currentTerm[VARI] <= currentTerm[VARJ])",
        "(currentTerm[VARJ] <= currentTerm[VARI])",
        "(currentTerm[VARI] = currentTerm[VARJ])",
        "(state[VARI] = Leader)",
        "(state[VARI] = Follower)",
        "(state[VARI] = Candidate)",
        "(state[VARJ] = Leader)",
        "(state[VARJ] = Follower)",
        "(state[VARJ] = Candidate)",
        "(state[VARI] = Leader /\\ VARI # VARJ)",
        "(state[VARI] = Candidate /\\ VARI # VARJ)",
        "(state[VARI] \\in {Leader,Candidate} /\\ VARJ \\in votesGranted[VARI])",
        "(state[VARI] \\in {Leader,Candidate} /\\ VARI # VARJ)",
        "(state[VARI] \\in {Leader,Candidate} /\\ state[VARJ] \\in {Leader,Candidate} /\\ VARI # VARJ)",
        "(state[VARI] \\in {Follower,Candidate} /\\ VARI # VARJ)",
        "(state[VARI] = Leader /\\ VARI # VARJ /\\ currentTerm[VARI] = currentTerm[VARJ])",
        "(state[VARI] = Candidate /\\ VARI # VARJ)",
        "(state[VARI] = Candidate /\\ VARI # VARJ /\\ currentTerm[VARI] = currentTerm[VARJ])",
        "(state[VARI] = Follower /\\ VARI # VARJ)",
        "(state[VARJ] \\in {Leader,Candidate} /\\ VARI # VARJ)",
        "votesGranted[VARI] = {}",
        "votesGranted[VARJ] = {}",
        "votesGranted[VARI] \\in Quorum",
        "votesGranted[VARJ] \\in Quorum",
        "VARI \\in votesGranted[VARI]",
        "VARJ \\in votesGranted[VARI]",
        "VARI \\in votesGranted[VARJ]",
        "VARJ \\in votesGranted[VARJ]",
        "votesGranted[VARI] \\cap votesGranted[VARJ] = {}",
        "(\\A t \\in votesGranted[VARI] : /\\ currentTerm[t] = currentTerm[VARI] => votedFor[t] = VARI )",
        "votedFor[VARI] # Nil",
        "votedFor[VARJ] # Nil",
        "votedFor[VARI] = VARI",
        "votedFor[VARJ] = VARJ",
        "votedFor[VARI] = VARJ",
        "votedFor[VARJ] = VARI",
        "votedFor[VARI] # Nil /\\ VARI \\in votesGranted[votedFor[VARI]]",
        "(commitIndex[VARI] > 0)",
        "log = [log EXCEPT ![VARI] = Append(log[VARI], currentTerm[VARI])]",
        "log = [log EXCEPT ![VARJ] = Append(log[VARJ], currentTerm[VARJ])]",
        "VARI \\in VARQ /\\ currentTerm = currentTerm",
        "VARJ \\in VARQ /\\ currentTerm = currentTerm",
        "\\E INDK \\in DOMAIN log[VARI] : log[VARI][INDK] < currentTerm[VARI]",
        "\\A INDK \\in DOMAIN log[VARI] : log[VARI][INDK] <= currentTerm[VARI]",
        "\\E INDK \\in DOMAIN log[VARI] : log[VARI][INDK] > currentTerm[VARI]",
        "\\E INDK \\in DOMAIN log[VARI] : log[VARI][INDK] > currentTerm[VARJ]",
        "\\E INDK \\in DOMAIN log[VARJ] : log[VARJ][INDK] = currentTerm[VARI]",
        "\\E INDK \\in DOMAIN log[VARJ] : ~\\E INDI \\in DOMAIN log[VARI] : (INDI = INDK /\\ log[VARI][INDK] = log[VARJ][INDK])",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ log[VARI][VARLOGINDI] = currentTerm[VARI]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ log[VARI][VARLOGINDI] < currentTerm[VARI]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ log[VARI][VARLOGINDI] > currentTerm[VARI]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ log[VARI][VARLOGINDI] = currentTerm[VARJ]",
        "Len(log[VARI]) >= commitIndex[VARI]",
        "Len(log[VARI]) >= commitIndex[VARJ]",
        "Len(log[VARJ]) >= commitIndex[VARJ]",
        "Len(log[VARI]) >= commitIndex[VARI] /\\ Len(log[VARJ]) >= commitIndex[VARI] /\\ commitIndex[VARI] > 0 /\\ log[VARI][commitIndex[VARI]] = log[VARJ][commitIndex[VARI]]",
        "VARLOGINDI \\in DOMAIN log[VARI]",
        "VARLOGINDI \\in DOMAIN log[VARJ]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ VARLOGINDI \\in DOMAIN log[VARJ] /\\ log[VARI][VARLOGINDI] = log[VARJ][VARLOGINDI]",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ Agree(VARI, VARLOGINDI) \\in Quorum /\\ matchIndex = matchIndex",
        "VARLOGINDI \\in DOMAIN log[VARI] /\\ Agree(VARI, VARLOGINDI) = {} /\\ matchIndex = matchIndex",
        "AgreeIndexes(VARI) = {} /\\ matchIndex = matchIndex",
        "AgreeIndexes(VARI) # {} /\\ log[VARI][Max(AgreeIndexes(VARI))] = currentTerm[VARI] /\\ matchIndex = matchIndex",
        "AgreeIndexes(VARI) # {} /\\ commitIndex[VARI] > Max(AgreeIndexes(VARI)) /\\ matchIndex = matchIndex",
        "AgreeIndexes(VARI) # {} /\\ commitIndex[VARI] = Max(AgreeIndexes(VARI)) /\\ matchIndex = matchIndex",
        "Len(log[VARI]) >= matchIndex[VARI][VARJ]",
        "Len(log[VARI]) > matchIndex[VARI][VARJ]",
        "commitIndex[VARI] \\in DOMAIN log[VARI] /\\ commitIndex[VARI] \\in DOMAIN log[VARJ] /\\ log[VARJ][commitIndex[VARI]] = log[VARI][commitIndex[VARI]]"
    ],
    "seed_lemmas": [
    ],
    "older_preds" : [
        "VARMAEREQ.mcommitIndex > 0",
        "(LogOk(VARI, VARMAEREQ) /\\ log = log) \\/ (~(VARMAEREQ.mentries # <<>> /\\ VARMAEREQ.mentries[1] = currentTerm[VARI] /\\ state[VARI] = Leader))",
        "H_PrimaryHasEntriesItCreated /\\ log = log /\\ state = state /\\ currentTerm = currentTerm"

    ],
    "action_local_preds":{
    },
    "preds_alt" : [],
    "safety"  :  "H_LogMatching",
    "constants"  : {
        "n1" : "n1",
        "n2" : "n2",
        "n3" : "n3",
        "n4" : "n4",
        "n5" : "n5",
        "Server" : [ "{n1,n2,n3}"],
        "Follower" : "Follower",
        "Candidate" : "Candidate",
        "Leader" : "Leader",
        "Nil" : "Nil",
        "RequestVoteRequest" : "RequestVoteRequest",
        "RequestVoteResponse" : "RequestVoteResponse",
        "AppendEntriesRequest" : "AppendEntriesRequest",
        "AppendEntriesResponse" : "AppendEntriesResponse",
        "MaxTerm" : ["3"],
        "MaxLogLen" : ["2"],
        "MaxMsgCount": ["1000"]
    },
    "large_instance_inv_check_index": 0,
    "cti_gen_instance_indexes": [0],
    "constraint"  :  "StateConstraint",
    "quant_inv": "\\A VARI \\in Server : \\A VARJ \\in Server : \\E VARQ \\in Quorum : \\A VARLOGINDI \\in LogIndices : ",
    "quant_vars": ["VARI", "VARJ", "VARIND", "VARM", "VARLOGINDI"],
    "model_consts"  :  "CONSTANT n1,n2,n3,n4,n5",
    "simulation_inv_check": true,
    "simulation_inv_check_num_states": 120000000,
    "simulation_inv_check_depth": 100,
    "symmetry" : true,
    "typeok"  :  "TypeOKRandom",
    "tlc_specific_spec": false,
    "try_final_minimize": false,
    "simulate"  :  true,
    "actions": [
        "RequestVoteAction",
        "BecomeLeaderAction",
        "ClientRequestAction",
        "AdvanceCommitIndexAction",
        "AppendEntriesAction",
        "UpdateTermRVReqAction",
        "UpdateTermRVResAction",
        "UpdateTermAEReqAction",
        "UpdateTermAEResAction",
        "HandleRequestVoteRequestAction",
        "HandleRequestVoteResponseAction",
        "RejectAppendEntriesRequestAction",
        "AcceptAppendEntriesRequestAppendAction",
        "AcceptAppendEntriesRequestLearnCommitAction",
        "HandleAppendEntriesResponseAction"
    ],
    "tlaps_proof_config": {
        "assumes": [
            "IsFiniteSet(Server) /\\ Cardinality(Server) > 1",
            "Nil \\notin Server",
            "(Leader # Follower) /\\ (Leader # Candidate)",
            "(Follower # Candidate)",
            "Server = Server",
            "Quorum \\subseteq SUBSET Server /\\ {} \\notin Quorum /\\ Quorum # {} /\\ \\A s \\in Server : {s} \\notin Quorum",
            "MaxLogLen \\in Nat",
            "MaxTerm \\in Nat"
        ],
        "lemma_def_expands": {
            "Safety": ["H_OnePrimaryPerTerm"],
            "H_RequestVoteQuorumInTermImpliesNoOtherLogsInTerm": ["ExistsRequestVoteResponseQuorum"]
        },
        "action_def_expands":{
            "HandleRequestVoteRequestAction": ["LastTerm","RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero"],
            "HandleRequestVoteResponseAction": ["LastTerm","RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero"],
            "RequestVoteAction": ["RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero", "AppendEntriesRequestType","AppendEntriesResponseType"],
            "UpdateTermAction": ["RequestVoteRequestType","RequestVoteResponseType","Terms","LogIndicesWithZero", "AppendEntriesRequestType","AppendEntriesResponseType"]
        }
    }
}